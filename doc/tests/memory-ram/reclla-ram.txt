5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |1000|5|300|10000000|100000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.660 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.660 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.660 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.660 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.660 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.660 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.660 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.660 MiB    0.000 MiB           i=0
    25   13.660 MiB    0.000 MiB           ar = self.slabArray
    26   23.660 MiB   10.000 MiB           while i < self.slabNumber:
    27   23.660 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.660 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.660 MiB    0.000 MiB           self.taglru = 0
    33   23.660 MiB    0.000 MiB           self.tagunused = 1
    34   23.660 MiB    0.000 MiB           self.tagpartial = 2
    35   23.660 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.660 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.660 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.660 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.660 MiB    0.000 MiB           self.purged = 0
    43                             
    44   23.660 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   23.660 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   23.660 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   23.660 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   23.660 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   23.660 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   23.660 MiB    0.000 MiB       import random
   256   23.660 MiB    0.000 MiB       old = 0
   257   23.660 MiB    0.000 MiB       getlist = []
   258                             
   259   23.660 MiB    0.000 MiB       for i in xrange(it):
   260                             
   261   23.660 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   23.660 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   23.660 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   23.660 MiB    0.000 MiB           if random.random()< getratio:
   267   23.660 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   23.660 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   23.660 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   23.660 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   23.660 MiB    0.000 MiB               old = percent
   274   23.660 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |5000|5|300|10000000|100000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.688 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.688 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.688 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.688 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.688 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.688 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.688 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.688 MiB    0.000 MiB           i=0
    25   13.688 MiB    0.000 MiB           ar = self.slabArray
    26   23.746 MiB   10.059 MiB           while i < self.slabNumber:
    27   23.746 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.746 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.746 MiB    0.000 MiB           self.taglru = 0
    33   23.746 MiB    0.000 MiB           self.tagunused = 1
    34   23.746 MiB    0.000 MiB           self.tagpartial = 2
    35   23.746 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.746 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.746 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.746 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.746 MiB    0.000 MiB           self.purged = 0
    43                             
    44   23.746 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   23.746 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   23.746 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   23.746 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   23.746 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   23.746 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   23.746 MiB    0.000 MiB       import random
   256   23.746 MiB    0.000 MiB       old = 0
   257   23.746 MiB    0.000 MiB       getlist = []
   258                             
   259   24.066 MiB    0.320 MiB       for i in xrange(it):
   260                             
   261   24.066 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   24.066 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   24.066 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   24.066 MiB    0.000 MiB           if random.random()< getratio:
   267   24.066 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   24.066 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   24.066 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   24.066 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   24.066 MiB    0.000 MiB               old = percent
   274   24.066 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |10000|5|300|10000000|100000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.773 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.773 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.773 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.773 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.773 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.773 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.773 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.773 MiB    0.000 MiB           i=0
    25   13.773 MiB    0.000 MiB           ar = self.slabArray
    26   23.773 MiB   10.000 MiB           while i < self.slabNumber:
    27   23.773 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.773 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.773 MiB    0.000 MiB           self.taglru = 0
    33   23.773 MiB    0.000 MiB           self.tagunused = 1
    34   23.773 MiB    0.000 MiB           self.tagpartial = 2
    35   23.773 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.773 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.773 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.773 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.773 MiB    0.000 MiB           self.purged = 0
    43                             
    44   23.773 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   23.773 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   23.773 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   23.773 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   23.773 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   23.773 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   23.773 MiB    0.000 MiB       import random
   256   23.773 MiB    0.000 MiB       old = 0
   257   23.773 MiB    0.000 MiB       getlist = []
   258                             
   259   24.883 MiB    1.109 MiB       for i in xrange(it):
   260                             
   261   24.883 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   24.883 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   24.883 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   24.883 MiB    0.000 MiB           if random.random()< getratio:
   267   24.883 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   24.883 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   24.883 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   24.883 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   24.688 MiB   -0.195 MiB               old = percent
   274   24.688 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |1000|5|300|100000|10000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.793 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.793 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.793 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.793 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.793 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.793 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.793 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.793 MiB    0.000 MiB           i=0
    25   13.793 MiB    0.000 MiB           ar = self.slabArray
    26   13.793 MiB    0.000 MiB           while i < self.slabNumber:
    27   13.793 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   13.793 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   13.793 MiB    0.000 MiB           self.taglru = 0
    33   13.793 MiB    0.000 MiB           self.tagunused = 1
    34   13.793 MiB    0.000 MiB           self.tagpartial = 2
    35   13.793 MiB    0.000 MiB           self.tagcomplete = 3
    36   13.793 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   13.793 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   13.793 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   13.793 MiB    0.000 MiB           self.purged = 0
    43                             
    44   13.793 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   13.793 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   13.793 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   13.793 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   13.793 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   13.793 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   13.793 MiB    0.000 MiB       import random
   256   13.793 MiB    0.000 MiB       old = 0
   257   13.793 MiB    0.000 MiB       getlist = []
   258                             
   259   13.793 MiB    0.000 MiB       for i in xrange(it):
   260                             
   261   13.793 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   13.793 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   13.793 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   13.793 MiB    0.000 MiB           if random.random()< getratio:
   267   13.793 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   13.793 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   13.793 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   13.793 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   13.793 MiB    0.000 MiB               old = percent
   274   13.793 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |5000|5|300|100000|10000|15|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.777 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.777 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.777 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.777 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.777 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.777 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.777 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.777 MiB    0.000 MiB           i=0
    25   13.777 MiB    0.000 MiB           ar = self.slabArray
    26   13.777 MiB    0.000 MiB           while i < self.slabNumber:
    27   13.777 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   13.777 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   13.777 MiB    0.000 MiB           self.taglru = 0
    33   13.777 MiB    0.000 MiB           self.tagunused = 1
    34   13.777 MiB    0.000 MiB           self.tagpartial = 2
    35   13.777 MiB    0.000 MiB           self.tagcomplete = 3
    36   13.777 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   13.777 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   13.777 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   13.777 MiB    0.000 MiB           self.purged = 0
    43                             
    44   13.777 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   13.777 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   13.777 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   13.777 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   13.777 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   13.777 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   13.777 MiB    0.000 MiB       import random
   256   13.777 MiB    0.000 MiB       old = 0
   257   13.777 MiB    0.000 MiB       getlist = []
   258                             
   259   14.656 MiB    0.879 MiB       for i in xrange(it):
   260                             
   261   14.656 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   14.656 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   14.656 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   14.656 MiB    0.000 MiB           if random.random()< getratio:
   267   14.656 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   14.656 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   14.656 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   14.656 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   14.656 MiB    0.000 MiB               old = percent
   274   14.656 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |10000|5|300|100000|10000|37|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.680 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.680 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.680 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.680 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.680 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.680 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.680 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.680 MiB    0.000 MiB           i=0
    25   13.680 MiB    0.000 MiB           ar = self.slabArray
    26   13.680 MiB    0.000 MiB           while i < self.slabNumber:
    27   13.680 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   13.680 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   13.680 MiB    0.000 MiB           self.taglru = 0
    33   13.680 MiB    0.000 MiB           self.tagunused = 1
    34   13.680 MiB    0.000 MiB           self.tagpartial = 2
    35   13.680 MiB    0.000 MiB           self.tagcomplete = 3
    36   13.680 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   13.680 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   13.680 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   13.680 MiB    0.000 MiB           self.purged = 0
    43                             
    44   13.680 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   13.680 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   13.680 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   13.680 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   13.680 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   13.680 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   13.680 MiB    0.000 MiB       import random
   256   13.680 MiB    0.000 MiB       old = 0
   257   13.680 MiB    0.000 MiB       getlist = []
   258                             
   259   15.059 MiB    1.379 MiB       for i in xrange(it):
   260                             
   261   15.059 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   15.059 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   15.059 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   15.059 MiB    0.000 MiB           if random.random()< getratio:
   267   15.059 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   15.059 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   15.059 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   15.059 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   14.754 MiB   -0.305 MiB               old = percent
   274   14.754 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |50000|5|300|100000|10000|215|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.828 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.828 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.828 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.828 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.828 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.828 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.828 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.828 MiB    0.000 MiB           i=0
    25   13.828 MiB    0.000 MiB           ar = self.slabArray
    26   13.828 MiB    0.000 MiB           while i < self.slabNumber:
    27   13.828 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   13.828 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   13.828 MiB    0.000 MiB           self.taglru = 0
    33   13.828 MiB    0.000 MiB           self.tagunused = 1
    34   13.828 MiB    0.000 MiB           self.tagpartial = 2
    35   13.828 MiB    0.000 MiB           self.tagcomplete = 3
    36   13.828 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   13.828 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   13.828 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   13.828 MiB    0.000 MiB           self.purged = 0
    43                             
    44   13.828 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   13.828 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   13.828 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   13.828 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   13.828 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   13.828 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   13.828 MiB    0.000 MiB       import random
   256   13.828 MiB    0.000 MiB       old = 0
   257   13.828 MiB    0.000 MiB       getlist = []
   258                             
   259   17.980 MiB    4.152 MiB       for i in xrange(it):
   260                             
   261   17.980 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   17.980 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   17.980 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   17.980 MiB    0.000 MiB           if random.random()< getratio:
   267   17.980 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   17.980 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   17.980 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   17.980 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   17.855 MiB   -0.125 MiB               old = percent
   274   17.855 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |1000|5|900|1000000|10000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.777 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.777 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.777 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.777 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.777 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.777 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.777 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.777 MiB    0.000 MiB           i=0
    25   13.777 MiB    0.000 MiB           ar = self.slabArray
    26   15.180 MiB    1.402 MiB           while i < self.slabNumber:
    27   15.180 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   15.180 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   15.180 MiB    0.000 MiB           self.taglru = 0
    33   15.180 MiB    0.000 MiB           self.tagunused = 1
    34   15.180 MiB    0.000 MiB           self.tagpartial = 2
    35   15.180 MiB    0.000 MiB           self.tagcomplete = 3
    36   15.180 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   15.180 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   15.180 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   15.180 MiB    0.000 MiB           self.purged = 0
    43                             
    44   15.180 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   15.180 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   15.180 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   15.180 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   15.180 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   15.180 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   15.180 MiB    0.000 MiB       import random
   256   15.180 MiB    0.000 MiB       old = 0
   257   15.180 MiB    0.000 MiB       getlist = []
   258                             
   259   15.180 MiB    0.000 MiB       for i in xrange(it):
   260                             
   261   15.180 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   15.180 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   15.180 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   15.180 MiB    0.000 MiB           if random.random()< getratio:
   267   15.180 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   15.180 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   15.180 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   15.180 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   15.180 MiB    0.000 MiB               old = percent
   274   15.180 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |5000|5|900|1000000|10000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.793 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.793 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.793 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.793 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.793 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.793 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.793 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.793 MiB    0.000 MiB           i=0
    25   13.793 MiB    0.000 MiB           ar = self.slabArray
    26   15.195 MiB    1.402 MiB           while i < self.slabNumber:
    27   15.195 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   15.195 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   15.195 MiB    0.000 MiB           self.taglru = 0
    33   15.195 MiB    0.000 MiB           self.tagunused = 1
    34   15.195 MiB    0.000 MiB           self.tagpartial = 2
    35   15.195 MiB    0.000 MiB           self.tagcomplete = 3
    36   15.195 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   15.195 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   15.195 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   15.195 MiB    0.000 MiB           self.purged = 0
    43                             
    44   15.195 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   15.195 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   15.195 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   15.195 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   15.195 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   15.195 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   15.195 MiB    0.000 MiB       import random
   256   15.195 MiB    0.000 MiB       old = 0
   257   15.195 MiB    0.000 MiB       getlist = []
   258                             
   259   15.590 MiB    0.395 MiB       for i in xrange(it):
   260                             
   261   15.590 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   15.590 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   15.590 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   15.590 MiB    0.000 MiB           if random.random()< getratio:
   267   15.590 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   15.590 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   15.590 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   15.590 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   15.590 MiB    0.000 MiB               old = percent
   274   15.590 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |10000|5|900|1000000|10000|54|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.648 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.648 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.648 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.648 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.648 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.648 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.648 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.648 MiB    0.000 MiB           i=0
    25   13.648 MiB    0.000 MiB           ar = self.slabArray
    26   15.051 MiB    1.402 MiB           while i < self.slabNumber:
    27   15.051 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   15.051 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   15.051 MiB    0.000 MiB           self.taglru = 0
    33   15.051 MiB    0.000 MiB           self.tagunused = 1
    34   15.051 MiB    0.000 MiB           self.tagpartial = 2
    35   15.051 MiB    0.000 MiB           self.tagcomplete = 3
    36   15.051 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   15.051 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   15.051 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   15.051 MiB    0.000 MiB           self.purged = 0
    43                             
    44   15.051 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   15.051 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   15.051 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   15.051 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   15.051 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   15.051 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   15.051 MiB    0.000 MiB       import random
   256   15.051 MiB    0.000 MiB       old = 0
   257   15.051 MiB    0.000 MiB       getlist = []
   258                             
   259   16.105 MiB    1.055 MiB       for i in xrange(it):
   260                             
   261   16.105 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   16.105 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   16.105 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   16.105 MiB    0.000 MiB           if random.random()< getratio:
   267   16.105 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   16.105 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   16.105 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   16.105 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   16.105 MiB    0.000 MiB               old = percent
   274   16.105 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |50000|5|900|1000000|10000|587|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.754 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.754 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.754 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.754 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.754 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.754 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.754 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.754 MiB    0.000 MiB           i=0
    25   13.754 MiB    0.000 MiB           ar = self.slabArray
    26   15.320 MiB    1.566 MiB           while i < self.slabNumber:
    27   15.320 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   15.320 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   15.320 MiB    0.000 MiB           self.taglru = 0
    33   15.320 MiB    0.000 MiB           self.tagunused = 1
    34   15.320 MiB    0.000 MiB           self.tagpartial = 2
    35   15.320 MiB    0.000 MiB           self.tagcomplete = 3
    36   15.320 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   15.320 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   15.320 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   15.320 MiB    0.000 MiB           self.purged = 0
    43                             
    44   15.320 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   15.320 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   15.320 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   15.320 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   15.320 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   15.320 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   15.320 MiB    0.000 MiB       import random
   256   15.320 MiB    0.000 MiB       old = 0
   257   15.320 MiB    0.000 MiB       getlist = []
   258                             
   259   19.188 MiB    3.867 MiB       for i in xrange(it):
   260                             
   261   19.188 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   19.188 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   19.188 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   19.188 MiB    0.000 MiB           if random.random()< getratio:
   267   19.188 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   19.188 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   19.188 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   19.188 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   19.016 MiB   -0.172 MiB               old = percent
   274   19.016 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |1000|5|900|10000000|10000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.691 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.691 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.691 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.691 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.691 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.691 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.691 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.691 MiB    0.000 MiB           i=0
    25   13.691 MiB    0.000 MiB           ar = self.slabArray
    26   23.820 MiB   10.129 MiB           while i < self.slabNumber:
    27   23.820 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.820 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.820 MiB    0.000 MiB           self.taglru = 0
    33   23.820 MiB    0.000 MiB           self.tagunused = 1
    34   23.820 MiB    0.000 MiB           self.tagpartial = 2
    35   23.820 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.820 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.820 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.820 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.820 MiB    0.000 MiB           self.purged = 0
    43                             
    44   25.367 MiB    1.547 MiB           for slabIndex in xrange(self.slabNumber):
    45   25.367 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   25.367 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   25.367 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   25.367 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   25.367 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   25.367 MiB    0.000 MiB       import random
   256   25.367 MiB    0.000 MiB       old = 0
   257   25.367 MiB    0.000 MiB       getlist = []
   258                             
   259   25.367 MiB    0.000 MiB       for i in xrange(it):
   260                             
   261   25.367 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   25.367 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   25.367 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   25.367 MiB    0.000 MiB           if random.random()< getratio:
   267   25.367 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   25.367 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   25.367 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   25.367 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   25.367 MiB    0.000 MiB               old = percent
   274   25.367 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |5000|5|900|10000000|10000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.668 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.668 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.668 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.668 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.668 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.668 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.668 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.668 MiB    0.000 MiB           i=0
    25   13.668 MiB    0.000 MiB           ar = self.slabArray
    26   23.734 MiB   10.066 MiB           while i < self.slabNumber:
    27   23.734 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.734 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.734 MiB    0.000 MiB           self.taglru = 0
    33   23.734 MiB    0.000 MiB           self.tagunused = 1
    34   23.734 MiB    0.000 MiB           self.tagpartial = 2
    35   23.734 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.734 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.734 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.734 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.734 MiB    0.000 MiB           self.purged = 0
    43                             
    44   25.281 MiB    1.547 MiB           for slabIndex in xrange(self.slabNumber):
    45   25.281 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   25.281 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   25.281 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   25.281 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   25.281 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   25.281 MiB    0.000 MiB       import random
   256   25.281 MiB    0.000 MiB       old = 0
   257   25.281 MiB    0.000 MiB       getlist = []
   258                             
   259   25.602 MiB    0.320 MiB       for i in xrange(it):
   260                             
   261   25.602 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   25.602 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   25.602 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   25.602 MiB    0.000 MiB           if random.random()< getratio:
   267   25.602 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   25.602 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   25.602 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   25.602 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   25.602 MiB    0.000 MiB               old = percent
   274   25.602 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |10000|5|900|10000000|10000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.828 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.828 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.828 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.828 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.828 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.828 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.828 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.828 MiB    0.000 MiB           i=0
    25   13.828 MiB    0.000 MiB           ar = self.slabArray
    26   23.957 MiB   10.129 MiB           while i < self.slabNumber:
    27   23.957 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.957 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.957 MiB    0.000 MiB           self.taglru = 0
    33   23.957 MiB    0.000 MiB           self.tagunused = 1
    34   23.957 MiB    0.000 MiB           self.tagpartial = 2
    35   23.957 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.957 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.957 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.957 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.957 MiB    0.000 MiB           self.purged = 0
    43                             
    44   25.504 MiB    1.547 MiB           for slabIndex in xrange(self.slabNumber):
    45   25.504 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   25.504 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   25.504 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   25.504 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   25.504 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   25.504 MiB    0.000 MiB       import random
   256   25.504 MiB    0.000 MiB       old = 0
   257   25.504 MiB    0.000 MiB       getlist = []
   258                             
   259   26.594 MiB    1.090 MiB       for i in xrange(it):
   260                             
   261   26.594 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   26.594 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   26.594 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   26.594 MiB    0.000 MiB           if random.random()< getratio:
   267   26.594 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   26.594 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   26.594 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   26.594 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   26.207 MiB   -0.387 MiB               old = percent
   274   26.207 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |50000|5|900|10000000|10000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.691 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.691 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.691 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.691 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.691 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.691 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.691 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.691 MiB    0.000 MiB           i=0
    25   13.691 MiB    0.000 MiB           ar = self.slabArray
    26   23.820 MiB   10.129 MiB           while i < self.slabNumber:
    27   23.820 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.820 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.820 MiB    0.000 MiB           self.taglru = 0
    33   23.820 MiB    0.000 MiB           self.tagunused = 1
    34   23.820 MiB    0.000 MiB           self.tagpartial = 2
    35   23.820 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.820 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.820 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.820 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.820 MiB    0.000 MiB           self.purged = 0
    43                             
    44   25.367 MiB    1.547 MiB           for slabIndex in xrange(self.slabNumber):
    45   25.367 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   25.367 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   25.367 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   25.367 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   25.367 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   25.367 MiB    0.000 MiB       import random
   256   25.367 MiB    0.000 MiB       old = 0
   257   25.367 MiB    0.000 MiB       getlist = []
   258                             
   259   30.621 MiB    5.254 MiB       for i in xrange(it):
   260                             
   261   30.621 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   30.621 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   30.621 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   30.621 MiB    0.000 MiB           if random.random()< getratio:
   267   30.621 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   30.621 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   30.621 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   30.621 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   30.367 MiB   -0.254 MiB               old = percent
   274   30.367 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |1000|1|300|10000000|100000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.777 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.777 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.777 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.777 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.777 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.777 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.777 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.777 MiB    0.000 MiB           i=0
    25   13.777 MiB    0.000 MiB           ar = self.slabArray
    26   23.840 MiB   10.062 MiB           while i < self.slabNumber:
    27   23.840 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.840 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.840 MiB    0.000 MiB           self.taglru = 0
    33   23.840 MiB    0.000 MiB           self.tagunused = 1
    34   23.840 MiB    0.000 MiB           self.tagpartial = 2
    35   23.840 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.840 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.840 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.840 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.840 MiB    0.000 MiB           self.purged = 0
    43                             
    44   23.840 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   23.840 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   23.840 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   23.840 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   23.840 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   23.840 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   23.840 MiB    0.000 MiB       import random
   256   23.840 MiB    0.000 MiB       old = 0
   257   23.840 MiB    0.000 MiB       getlist = []
   258                             
   259   23.840 MiB    0.000 MiB       for i in xrange(it):
   260                             
   261   23.840 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   23.840 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   23.840 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   23.840 MiB    0.000 MiB           if random.random()< getratio:
   267   23.840 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   23.840 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   23.840 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   23.840 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   23.840 MiB    0.000 MiB               old = percent
   274   23.840 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |5000|1|300|10000000|100000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.793 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.793 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.793 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.793 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.793 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.793 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.793 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.793 MiB    0.000 MiB           i=0
    25   13.793 MiB    0.000 MiB           ar = self.slabArray
    26   23.855 MiB   10.062 MiB           while i < self.slabNumber:
    27   23.855 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.855 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.855 MiB    0.000 MiB           self.taglru = 0
    33   23.855 MiB    0.000 MiB           self.tagunused = 1
    34   23.855 MiB    0.000 MiB           self.tagpartial = 2
    35   23.855 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.855 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.855 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.855 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.855 MiB    0.000 MiB           self.purged = 0
    43                             
    44   23.855 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   23.855 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   23.855 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   23.855 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   23.855 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   23.855 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   23.855 MiB    0.000 MiB       import random
   256   23.855 MiB    0.000 MiB       old = 0
   257   23.855 MiB    0.000 MiB       getlist = []
   258                             
   259   24.699 MiB    0.844 MiB       for i in xrange(it):
   260                             
   261   24.699 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   24.699 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   24.699 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   24.699 MiB    0.000 MiB           if random.random()< getratio:
   267   24.699 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   24.699 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   24.699 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   24.699 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   24.441 MiB   -0.258 MiB               old = percent
   274   24.441 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |10000|1|300|10000000|100000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.770 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.770 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.770 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.770 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.770 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.770 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.770 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.770 MiB    0.000 MiB           i=0
    25   13.770 MiB    0.000 MiB           ar = self.slabArray
    26   23.770 MiB   10.000 MiB           while i < self.slabNumber:
    27   23.770 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.770 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.770 MiB    0.000 MiB           self.taglru = 0
    33   23.770 MiB    0.000 MiB           self.tagunused = 1
    34   23.770 MiB    0.000 MiB           self.tagpartial = 2
    35   23.770 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.770 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.770 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.770 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.770 MiB    0.000 MiB           self.purged = 0
    43                             
    44   23.770 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   23.770 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   23.770 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   23.770 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   23.770 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   23.770 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   23.770 MiB    0.000 MiB       import random
   256   23.770 MiB    0.000 MiB       old = 0
   257   23.770 MiB    0.000 MiB       getlist = []
   258                             
   259   25.395 MiB    1.625 MiB       for i in xrange(it):
   260                             
   261   25.395 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   25.395 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   25.395 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   25.395 MiB    0.000 MiB           if random.random()< getratio:
   267   25.395 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   25.395 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   25.395 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   25.395 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   25.141 MiB   -0.254 MiB               old = percent
   274   25.141 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |50000|1|300|10000000|100000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.910 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.910 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.910 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.910 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.910 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.910 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.910 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.910 MiB    0.000 MiB           i=0
    25   13.910 MiB    0.000 MiB           ar = self.slabArray
    26   24.035 MiB   10.125 MiB           while i < self.slabNumber:
    27   24.035 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   24.035 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   24.035 MiB    0.000 MiB           self.taglru = 0
    33   24.035 MiB    0.000 MiB           self.tagunused = 1
    34   24.035 MiB    0.000 MiB           self.tagpartial = 2
    35   24.035 MiB    0.000 MiB           self.tagcomplete = 3
    36   24.035 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   24.035 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   24.035 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   24.035 MiB    0.000 MiB           self.purged = 0
    43                             
    44   24.035 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   24.035 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   24.035 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   24.035 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   24.035 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   24.035 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   24.035 MiB    0.000 MiB       import random
   256   24.035 MiB    0.000 MiB       old = 0
   257   24.035 MiB    0.000 MiB       getlist = []
   258                             
   259   31.617 MiB    7.582 MiB       for i in xrange(it):
   260                             
   261   31.617 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   31.617 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   31.617 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   31.617 MiB    0.000 MiB           if random.random()< getratio:
   267   31.617 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   31.617 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   31.617 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   31.617 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   31.434 MiB   -0.184 MiB               old = percent
   274   31.434 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |1000|5|300|1000000000|1000000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.707 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.707 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.707 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.707 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.707 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.707 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.707 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.707 MiB    0.000 MiB           i=0
    25   13.707 MiB    0.000 MiB           ar = self.slabArray
    26  968.625 MiB  954.918 MiB           while i < self.slabNumber:
    27  968.625 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28  968.625 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32  968.625 MiB    0.000 MiB           self.taglru = 0
    33  968.625 MiB    0.000 MiB           self.tagunused = 1
    34  968.625 MiB    0.000 MiB           self.tagpartial = 2
    35  968.625 MiB    0.000 MiB           self.tagcomplete = 3
    36  968.625 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37  968.625 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40  968.625 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42  968.625 MiB    0.000 MiB           self.purged = 0
    43                             
    44  969.398 MiB    0.773 MiB           for slabIndex in xrange(self.slabNumber):
    45  969.398 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47  969.398 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48  969.398 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50  969.398 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253  969.398 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255  969.398 MiB    0.000 MiB       import random
   256  969.398 MiB    0.000 MiB       old = 0
   257  969.398 MiB    0.000 MiB       getlist = []
   258                             
   259  969.656 MiB    0.258 MiB       for i in xrange(it):
   260                             
   261  969.656 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264  969.656 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265  969.656 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266  969.656 MiB    0.000 MiB           if random.random()< getratio:
   267  969.656 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269  969.398 MiB   -0.258 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271  969.656 MiB    0.258 MiB           percent = int(i*1.0/it *100)
   272  969.656 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273  969.398 MiB   -0.258 MiB               old = percent
   274  969.398 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |5000|5|300|1000000000|1000000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.828 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.828 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.828 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.828 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.828 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.828 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.828 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.828 MiB    0.000 MiB           i=0
    25   13.828 MiB    0.000 MiB           ar = self.slabArray
    26  968.750 MiB  954.922 MiB           while i < self.slabNumber:
    27  968.750 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28  968.750 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32  968.750 MiB    0.000 MiB           self.taglru = 0
    33  968.750 MiB    0.000 MiB           self.tagunused = 1
    34  968.750 MiB    0.000 MiB           self.tagpartial = 2
    35  968.750 MiB    0.000 MiB           self.tagcomplete = 3
    36  968.750 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37  968.750 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40  968.750 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42  968.750 MiB    0.000 MiB           self.purged = 0
    43                             
    44  969.523 MiB    0.773 MiB           for slabIndex in xrange(self.slabNumber):
    45  969.523 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47  969.523 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48  969.523 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50  969.523 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253  969.523 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255  969.523 MiB    0.000 MiB       import random
   256  969.523 MiB    0.000 MiB       old = 0
   257  969.523 MiB    0.000 MiB       getlist = []
   258                             
   259  969.980 MiB    0.457 MiB       for i in xrange(it):
   260                             
   261  969.980 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264  969.980 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265  969.980 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266  969.980 MiB    0.000 MiB           if random.random()< getratio:
   267  969.980 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269  969.980 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271  969.980 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272  969.980 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273  969.980 MiB    0.000 MiB               old = percent
   274  969.980 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |10000|5|300|1000000000|1000000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.688 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.688 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.688 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.688 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.688 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.688 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.688 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.688 MiB    0.000 MiB           i=0
    25   13.688 MiB    0.000 MiB           ar = self.slabArray
    26  968.605 MiB  954.918 MiB           while i < self.slabNumber:
    27  968.605 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28  968.605 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32  968.605 MiB    0.000 MiB           self.taglru = 0
    33  968.605 MiB    0.000 MiB           self.tagunused = 1
    34  968.605 MiB    0.000 MiB           self.tagpartial = 2
    35  968.605 MiB    0.000 MiB           self.tagcomplete = 3
    36  968.605 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37  968.605 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40  968.605 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42  968.605 MiB    0.000 MiB           self.purged = 0
    43                             
    44  969.379 MiB    0.773 MiB           for slabIndex in xrange(self.slabNumber):
    45  969.379 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47  969.379 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48  969.379 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50  969.379 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253  969.379 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255  969.379 MiB    0.000 MiB       import random
   256  969.379 MiB    0.000 MiB       old = 0
   257  969.379 MiB    0.000 MiB       getlist = []
   258                             
   259  970.602 MiB    1.223 MiB       for i in xrange(it):
   260                             
   261  970.602 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264  970.602 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265  970.602 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266  970.602 MiB    0.000 MiB           if random.random()< getratio:
   267  970.602 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269  970.602 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271  970.602 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272  970.602 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273  970.602 MiB    0.000 MiB               old = percent
   274  970.602 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |50000|5|300|1000000000|1000000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.793 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.793 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.793 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.793 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.793 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.793 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.793 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.793 MiB    0.000 MiB           i=0
    25   13.793 MiB    0.000 MiB           ar = self.slabArray
    26  968.715 MiB  954.922 MiB           while i < self.slabNumber:
    27  968.715 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28  968.715 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32  968.715 MiB    0.000 MiB           self.taglru = 0
    33  968.715 MiB    0.000 MiB           self.tagunused = 1
    34  968.715 MiB    0.000 MiB           self.tagpartial = 2
    35  968.715 MiB    0.000 MiB           self.tagcomplete = 3
    36  968.715 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37  968.715 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40  968.715 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42  968.715 MiB    0.000 MiB           self.purged = 0
    43                             
    44  969.488 MiB    0.773 MiB           for slabIndex in xrange(self.slabNumber):
    45  969.488 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47  969.488 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48  969.488 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50  969.488 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253  969.488 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255  969.488 MiB    0.000 MiB       import random
   256  969.488 MiB    0.000 MiB       old = 0
   257  969.488 MiB    0.000 MiB       getlist = []
   258                             
   259  974.988 MiB    5.500 MiB       for i in xrange(it):
   260                             
   261  974.988 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264  974.988 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265  974.988 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266  974.988 MiB    0.000 MiB           if random.random()< getratio:
   267  974.988 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269  974.988 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271  974.988 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272  974.988 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273  974.988 MiB    0.000 MiB               old = percent
   274  974.988 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |10000|5|300|10000000|100000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.828 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.828 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.828 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.828 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.828 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.828 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.828 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.828 MiB    0.000 MiB           i=0
    25   13.828 MiB    0.000 MiB           ar = self.slabArray
    26   23.891 MiB   10.062 MiB           while i < self.slabNumber:
    27   23.891 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.891 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.891 MiB    0.000 MiB           self.taglru = 0
    33   23.891 MiB    0.000 MiB           self.tagunused = 1
    34   23.891 MiB    0.000 MiB           self.tagpartial = 2
    35   23.891 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.891 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.891 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.891 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.891 MiB    0.000 MiB           self.purged = 0
    43                             
    44   23.891 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   23.891 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   23.891 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   23.891 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   23.891 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   23.891 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   23.891 MiB    0.000 MiB       import random
   256   23.891 MiB    0.000 MiB       old = 0
   257   23.891 MiB    0.000 MiB       getlist = []
   258                             
   259   24.918 MiB    1.027 MiB       for i in xrange(it):
   260                             
   261   24.918 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   24.918 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   24.918 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   24.918 MiB    0.000 MiB           if random.random()< getratio:
   267   24.918 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   24.918 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   24.918 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   24.918 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   24.918 MiB    0.000 MiB               old = percent
   274   24.918 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |50000|5|300|10000000|100000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.680 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.680 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.680 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.680 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.680 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.680 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.680 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.680 MiB    0.000 MiB           i=0
    25   13.680 MiB    0.000 MiB           ar = self.slabArray
    26   23.680 MiB   10.000 MiB           while i < self.slabNumber:
    27   23.680 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.680 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.680 MiB    0.000 MiB           self.taglru = 0
    33   23.680 MiB    0.000 MiB           self.tagunused = 1
    34   23.680 MiB    0.000 MiB           self.tagpartial = 2
    35   23.680 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.680 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.680 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.680 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.680 MiB    0.000 MiB           self.purged = 0
    43                             
    44   23.680 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   23.680 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   23.680 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   23.680 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   23.680 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   23.680 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   23.680 MiB    0.000 MiB       import random
   256   23.680 MiB    0.000 MiB       old = 0
   257   23.680 MiB    0.000 MiB       getlist = []
   258                             
   259   28.562 MiB    4.883 MiB       for i in xrange(it):
   260                             
   261   28.562 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   28.562 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   28.562 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   28.562 MiB    0.000 MiB           if random.random()< getratio:
   267   28.562 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   28.562 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   28.562 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   28.562 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   28.309 MiB   -0.254 MiB               old = percent
   274   28.309 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |100000|5|300|10000000|100000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.770 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.770 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.770 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.770 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.770 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.770 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.770 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.770 MiB    0.000 MiB           i=0
    25   13.770 MiB    0.000 MiB           ar = self.slabArray
    26   23.770 MiB   10.000 MiB           while i < self.slabNumber:
    27   23.770 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.770 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.770 MiB    0.000 MiB           self.taglru = 0
    33   23.770 MiB    0.000 MiB           self.tagunused = 1
    34   23.770 MiB    0.000 MiB           self.tagpartial = 2
    35   23.770 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.770 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.770 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.770 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.770 MiB    0.000 MiB           self.purged = 0
    43                             
    44   23.770 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   23.770 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   23.770 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   23.770 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   23.770 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   23.770 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   23.770 MiB    0.000 MiB       import random
   256   23.770 MiB    0.000 MiB       old = 0
   257   23.770 MiB    0.000 MiB       getlist = []
   258                             
   259   32.660 MiB    8.891 MiB       for i in xrange(it):
   260                             
   261   32.660 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   32.660 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   32.660 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   32.660 MiB    0.000 MiB           if random.random()< getratio:
   267   32.660 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   32.660 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   32.660 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   32.660 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   32.301 MiB   -0.359 MiB               old = percent
   274   32.301 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |10000|5|300|100000|10000|36|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.922 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.922 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.922 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.922 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.922 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.922 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.922 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.922 MiB    0.000 MiB           i=0
    25   13.922 MiB    0.000 MiB           ar = self.slabArray
    26   13.922 MiB    0.000 MiB           while i < self.slabNumber:
    27   13.922 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   13.922 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   13.922 MiB    0.000 MiB           self.taglru = 0
    33   13.922 MiB    0.000 MiB           self.tagunused = 1
    34   13.922 MiB    0.000 MiB           self.tagpartial = 2
    35   13.922 MiB    0.000 MiB           self.tagcomplete = 3
    36   13.922 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   13.922 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   13.922 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   13.922 MiB    0.000 MiB           self.purged = 0
    43                             
    44   13.922 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   13.922 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   13.922 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   13.922 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   13.922 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   13.922 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   13.922 MiB    0.000 MiB       import random
   256   13.922 MiB    0.000 MiB       old = 0
   257   13.922 MiB    0.000 MiB       getlist = []
   258                             
   259   15.172 MiB    1.250 MiB       for i in xrange(it):
   260                             
   261   15.172 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   15.172 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   15.172 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   15.172 MiB    0.000 MiB           if random.random()< getratio:
   267   15.172 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   15.172 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   15.172 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   15.172 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   14.996 MiB   -0.176 MiB               old = percent
   274   14.996 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |50000|5|300|100000|10000|215|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.684 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.684 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.684 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.684 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.684 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.684 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.684 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.684 MiB    0.000 MiB           i=0
    25   13.684 MiB    0.000 MiB           ar = self.slabArray
    26   13.684 MiB    0.000 MiB           while i < self.slabNumber:
    27   13.684 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   13.684 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   13.684 MiB    0.000 MiB           self.taglru = 0
    33   13.684 MiB    0.000 MiB           self.tagunused = 1
    34   13.684 MiB    0.000 MiB           self.tagpartial = 2
    35   13.684 MiB    0.000 MiB           self.tagcomplete = 3
    36   13.684 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   13.684 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   13.684 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   13.684 MiB    0.000 MiB           self.purged = 0
    43                             
    44   13.684 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   13.684 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   13.684 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   13.684 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   13.684 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   13.684 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   13.684 MiB    0.000 MiB       import random
   256   13.684 MiB    0.000 MiB       old = 0
   257   13.684 MiB    0.000 MiB       getlist = []
   258                             
   259   17.773 MiB    4.090 MiB       for i in xrange(it):
   260                             
   261   17.773 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   17.773 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   17.773 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   17.773 MiB    0.000 MiB           if random.random()< getratio:
   267   17.773 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   17.773 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   17.773 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   17.773 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   17.645 MiB   -0.129 MiB               old = percent
   274   17.645 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |100000|5|300|100000|10000|432|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.707 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.707 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.707 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.707 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.707 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.707 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.707 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.707 MiB    0.000 MiB           i=0
    25   13.707 MiB    0.000 MiB           ar = self.slabArray
    26   13.707 MiB    0.000 MiB           while i < self.slabNumber:
    27   13.707 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   13.707 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   13.707 MiB    0.000 MiB           self.taglru = 0
    33   13.707 MiB    0.000 MiB           self.tagunused = 1
    34   13.707 MiB    0.000 MiB           self.tagpartial = 2
    35   13.707 MiB    0.000 MiB           self.tagcomplete = 3
    36   13.707 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   13.707 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   13.707 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   13.707 MiB    0.000 MiB           self.purged = 0
    43                             
    44   13.707 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   13.707 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   13.707 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   13.707 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   13.707 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   13.707 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   13.707 MiB    0.000 MiB       import random
   256   13.707 MiB    0.000 MiB       old = 0
   257   13.707 MiB    0.000 MiB       getlist = []
   258                             
   259   20.523 MiB    6.816 MiB       for i in xrange(it):
   260                             
   261   20.523 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   20.523 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   20.523 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   20.523 MiB    0.000 MiB           if random.random()< getratio:
   267   20.523 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   20.523 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   20.523 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   20.523 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   20.266 MiB   -0.258 MiB               old = percent
   274   20.266 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |500000|5|300|100000|10000|2162|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.691 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.691 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.691 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.691 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.691 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.691 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.691 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.691 MiB    0.000 MiB           i=0
    25   13.691 MiB    0.000 MiB           ar = self.slabArray
    26   13.691 MiB    0.000 MiB           while i < self.slabNumber:
    27   13.691 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   13.691 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   13.691 MiB    0.000 MiB           self.taglru = 0
    33   13.691 MiB    0.000 MiB           self.tagunused = 1
    34   13.691 MiB    0.000 MiB           self.tagpartial = 2
    35   13.691 MiB    0.000 MiB           self.tagcomplete = 3
    36   13.691 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   13.691 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   13.691 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   13.691 MiB    0.000 MiB           self.purged = 0
    43                             
    44   13.691 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   13.691 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   13.691 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   13.691 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   13.691 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   13.691 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   13.691 MiB    0.000 MiB       import random
   256   13.691 MiB    0.000 MiB       old = 0
   257   13.691 MiB    0.000 MiB       getlist = []
   258                             
   259   45.941 MiB   32.250 MiB       for i in xrange(it):
   260                             
   261   45.941 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   45.941 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   45.941 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   45.941 MiB    0.000 MiB           if random.random()< getratio:
   267   45.941 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   45.941 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   45.941 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   45.941 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   44.398 MiB   -1.543 MiB               old = percent
   274   44.398 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |10000|5|900|1000000|10000|48|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.691 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.691 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.691 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.691 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.691 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.691 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.691 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.691 MiB    0.000 MiB           i=0
    25   13.691 MiB    0.000 MiB           ar = self.slabArray
    26   15.094 MiB    1.402 MiB           while i < self.slabNumber:
    27   15.094 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   15.094 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   15.094 MiB    0.000 MiB           self.taglru = 0
    33   15.094 MiB    0.000 MiB           self.tagunused = 1
    34   15.094 MiB    0.000 MiB           self.tagpartial = 2
    35   15.094 MiB    0.000 MiB           self.tagcomplete = 3
    36   15.094 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   15.094 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   15.094 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   15.094 MiB    0.000 MiB           self.purged = 0
    43                             
    44   15.094 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   15.094 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   15.094 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   15.094 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   15.094 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   15.094 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   15.094 MiB    0.000 MiB       import random
   256   15.094 MiB    0.000 MiB       old = 0
   257   15.094 MiB    0.000 MiB       getlist = []
   258                             
   259   16.172 MiB    1.078 MiB       for i in xrange(it):
   260                             
   261   16.172 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   16.172 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   16.172 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   16.172 MiB    0.000 MiB           if random.random()< getratio:
   267   16.172 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   16.172 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   16.172 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   16.172 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   15.918 MiB   -0.254 MiB               old = percent
   274   15.918 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |50000|5|900|1000000|10000|600|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.723 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.723 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.723 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.723 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.723 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.723 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.723 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.723 MiB    0.000 MiB           i=0
    25   13.723 MiB    0.000 MiB           ar = self.slabArray
    26   15.062 MiB    1.340 MiB           while i < self.slabNumber:
    27   15.062 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   15.062 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   15.062 MiB    0.000 MiB           self.taglru = 0
    33   15.062 MiB    0.000 MiB           self.tagunused = 1
    34   15.062 MiB    0.000 MiB           self.tagpartial = 2
    35   15.062 MiB    0.000 MiB           self.tagcomplete = 3
    36   15.062 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   15.062 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   15.062 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   15.062 MiB    0.000 MiB           self.purged = 0
    43                             
    44   15.062 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   15.062 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   15.062 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   15.062 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   15.062 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   15.062 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   15.062 MiB    0.000 MiB       import random
   256   15.062 MiB    0.000 MiB       old = 0
   257   15.062 MiB    0.000 MiB       getlist = []
   258                             
   259   19.094 MiB    4.031 MiB       for i in xrange(it):
   260                             
   261   19.094 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   19.094 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   19.094 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   19.094 MiB    0.000 MiB           if random.random()< getratio:
   267   19.094 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   19.094 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   19.094 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   19.094 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   18.891 MiB   -0.203 MiB               old = percent
   274   18.891 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |100000|5|900|1000000|10000|1253|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.625 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.625 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.625 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.625 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.625 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.625 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.625 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.625 MiB    0.000 MiB           i=0
    25   13.625 MiB    0.000 MiB           ar = self.slabArray
    26   14.965 MiB    1.340 MiB           while i < self.slabNumber:
    27   14.965 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   14.965 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   14.965 MiB    0.000 MiB           self.taglru = 0
    33   14.965 MiB    0.000 MiB           self.tagunused = 1
    34   14.965 MiB    0.000 MiB           self.tagpartial = 2
    35   14.965 MiB    0.000 MiB           self.tagcomplete = 3
    36   14.965 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   14.965 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   14.965 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   14.965 MiB    0.000 MiB           self.purged = 0
    43                             
    44   14.965 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   14.965 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   14.965 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   14.965 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   14.965 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   14.965 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   14.965 MiB    0.000 MiB       import random
   256   14.965 MiB    0.000 MiB       old = 0
   257   14.965 MiB    0.000 MiB       getlist = []
   258                             
   259   21.695 MiB    6.730 MiB       for i in xrange(it):
   260                             
   261   21.695 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   21.695 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   21.695 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   21.695 MiB    0.000 MiB           if random.random()< getratio:
   267   21.695 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   21.695 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   21.695 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   21.695 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   21.387 MiB   -0.309 MiB               old = percent
   274   21.387 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |500000|5|900|1000000|10000|6510|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.793 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.793 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.793 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.793 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.793 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.793 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.793 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.793 MiB    0.000 MiB           i=0
    25   13.793 MiB    0.000 MiB           ar = self.slabArray
    26   15.195 MiB    1.402 MiB           while i < self.slabNumber:
    27   15.195 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   15.195 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   15.195 MiB    0.000 MiB           self.taglru = 0
    33   15.195 MiB    0.000 MiB           self.tagunused = 1
    34   15.195 MiB    0.000 MiB           self.tagpartial = 2
    35   15.195 MiB    0.000 MiB           self.tagcomplete = 3
    36   15.195 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   15.195 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   15.195 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   15.195 MiB    0.000 MiB           self.purged = 0
    43                             
    44   15.195 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   15.195 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   15.195 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   15.195 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   15.195 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   15.195 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   15.195 MiB    0.000 MiB       import random
   256   15.195 MiB    0.000 MiB       old = 0
   257   15.195 MiB    0.000 MiB       getlist = []
   258                             
   259   47.074 MiB   31.879 MiB       for i in xrange(it):
   260                             
   261   47.074 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   47.074 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   47.074 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   47.074 MiB    0.000 MiB           if random.random()< getratio:
   267   47.074 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   47.074 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   47.074 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   47.074 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   45.785 MiB   -1.289 MiB               old = percent
   274   45.785 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |10000|5|900|10000000|10000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.777 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.777 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.777 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.777 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.777 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.777 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.777 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.777 MiB    0.000 MiB           i=0
    25   13.777 MiB    0.000 MiB           ar = self.slabArray
    26   23.906 MiB   10.129 MiB           while i < self.slabNumber:
    27   23.906 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.906 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.906 MiB    0.000 MiB           self.taglru = 0
    33   23.906 MiB    0.000 MiB           self.tagunused = 1
    34   23.906 MiB    0.000 MiB           self.tagpartial = 2
    35   23.906 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.906 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.906 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.906 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.906 MiB    0.000 MiB           self.purged = 0
    43                             
    44   25.453 MiB    1.547 MiB           for slabIndex in xrange(self.slabNumber):
    45   25.453 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   25.453 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   25.453 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   25.453 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   25.453 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   25.453 MiB    0.000 MiB       import random
   256   25.453 MiB    0.000 MiB       old = 0
   257   25.453 MiB    0.000 MiB       getlist = []
   258                             
   259   26.562 MiB    1.109 MiB       for i in xrange(it):
   260                             
   261   26.562 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   26.562 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   26.562 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   26.562 MiB    0.000 MiB           if random.random()< getratio:
   267   26.562 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   26.562 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   26.562 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   26.562 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   26.168 MiB   -0.395 MiB               old = percent
   274   26.168 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |50000|5|900|10000000|10000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.648 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.648 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.648 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.648 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.648 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.648 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.648 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.648 MiB    0.000 MiB           i=0
    25   13.648 MiB    0.000 MiB           ar = self.slabArray
    26   23.777 MiB   10.129 MiB           while i < self.slabNumber:
    27   23.777 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.777 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.777 MiB    0.000 MiB           self.taglru = 0
    33   23.777 MiB    0.000 MiB           self.tagunused = 1
    34   23.777 MiB    0.000 MiB           self.tagpartial = 2
    35   23.777 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.777 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.777 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.777 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.777 MiB    0.000 MiB           self.purged = 0
    43                             
    44   25.324 MiB    1.547 MiB           for slabIndex in xrange(self.slabNumber):
    45   25.324 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   25.324 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   25.324 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   25.324 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   25.324 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   25.324 MiB    0.000 MiB       import random
   256   25.324 MiB    0.000 MiB       old = 0
   257   25.324 MiB    0.000 MiB       getlist = []
   258                             
   259   30.598 MiB    5.273 MiB       for i in xrange(it):
   260                             
   261   30.598 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   30.598 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   30.598 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   30.598 MiB    0.000 MiB           if random.random()< getratio:
   267   30.598 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   30.598 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   30.598 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   30.598 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   30.344 MiB   -0.254 MiB               old = percent
   274   30.344 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |100000|5|900|10000000|10000|514|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.828 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.828 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.828 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.828 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.828 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.828 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.828 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.828 MiB    0.000 MiB           i=0
    25   13.828 MiB    0.000 MiB           ar = self.slabArray
    26   23.957 MiB   10.129 MiB           while i < self.slabNumber:
    27   23.957 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.957 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.957 MiB    0.000 MiB           self.taglru = 0
    33   23.957 MiB    0.000 MiB           self.tagunused = 1
    34   23.957 MiB    0.000 MiB           self.tagpartial = 2
    35   23.957 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.957 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.957 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.957 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.957 MiB    0.000 MiB           self.purged = 0
    43                             
    44   25.504 MiB    1.547 MiB           for slabIndex in xrange(self.slabNumber):
    45   25.504 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   25.504 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   25.504 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   25.504 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   25.504 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   25.504 MiB    0.000 MiB       import random
   256   25.504 MiB    0.000 MiB       old = 0
   257   25.504 MiB    0.000 MiB       getlist = []
   258                             
   259   34.199 MiB    8.695 MiB       for i in xrange(it):
   260                             
   261   34.199 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   34.199 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   34.199 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   34.199 MiB    0.000 MiB           if random.random()< getratio:
   267   34.199 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   34.199 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   34.199 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   34.199 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   33.945 MiB   -0.254 MiB               old = percent
   274   33.945 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |500000|5|900|10000000|10000|5986|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.680 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.680 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.680 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.680 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.680 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.680 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.680 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.680 MiB    0.000 MiB           i=0
    25   13.680 MiB    0.000 MiB           ar = self.slabArray
    26   23.746 MiB   10.066 MiB           while i < self.slabNumber:
    27   23.746 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.746 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.746 MiB    0.000 MiB           self.taglru = 0
    33   23.746 MiB    0.000 MiB           self.tagunused = 1
    34   23.746 MiB    0.000 MiB           self.tagpartial = 2
    35   23.746 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.746 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.746 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.746 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.746 MiB    0.000 MiB           self.purged = 0
    43                             
    44   25.293 MiB    1.547 MiB           for slabIndex in xrange(self.slabNumber):
    45   25.293 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   25.293 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   25.293 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   25.293 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   25.293 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   25.293 MiB    0.000 MiB       import random
   256   25.293 MiB    0.000 MiB       old = 0
   257   25.293 MiB    0.000 MiB       getlist = []
   258                             
   259   59.152 MiB   33.859 MiB       for i in xrange(it):
   260                             
   261   59.152 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   59.152 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   59.152 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   59.152 MiB    0.000 MiB           if random.random()< getratio:
   267   59.152 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   59.152 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   59.152 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   59.152 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   57.605 MiB   -1.547 MiB               old = percent
   274   57.605 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |10000|1|300|10000000|100000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.910 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.910 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.910 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.910 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.910 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.910 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.910 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.910 MiB    0.000 MiB           i=0
    25   13.910 MiB    0.000 MiB           ar = self.slabArray
    26   24.035 MiB   10.125 MiB           while i < self.slabNumber:
    27   24.035 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   24.035 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   24.035 MiB    0.000 MiB           self.taglru = 0
    33   24.035 MiB    0.000 MiB           self.tagunused = 1
    34   24.035 MiB    0.000 MiB           self.tagpartial = 2
    35   24.035 MiB    0.000 MiB           self.tagcomplete = 3
    36   24.035 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   24.035 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   24.035 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   24.035 MiB    0.000 MiB           self.purged = 0
    43                             
    44   24.035 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   24.035 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   24.035 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   24.035 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   24.035 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   24.035 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   24.035 MiB    0.000 MiB       import random
   256   24.035 MiB    0.000 MiB       old = 0
   257   24.035 MiB    0.000 MiB       getlist = []
   258                             
   259   25.660 MiB    1.625 MiB       for i in xrange(it):
   260                             
   261   25.660 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   25.660 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   25.660 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   25.660 MiB    0.000 MiB           if random.random()< getratio:
   267   25.660 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   25.660 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   25.660 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   25.660 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   25.406 MiB   -0.254 MiB               old = percent
   274   25.406 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |50000|1|300|10000000|100000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.711 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.711 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.711 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.711 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.711 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.711 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.711 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.711 MiB    0.000 MiB           i=0
    25   13.711 MiB    0.000 MiB           ar = self.slabArray
    26   23.770 MiB   10.059 MiB           while i < self.slabNumber:
    27   23.770 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.770 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.770 MiB    0.000 MiB           self.taglru = 0
    33   23.770 MiB    0.000 MiB           self.tagunused = 1
    34   23.770 MiB    0.000 MiB           self.tagpartial = 2
    35   23.770 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.770 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.770 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.770 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.770 MiB    0.000 MiB           self.purged = 0
    43                             
    44   23.770 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   23.770 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   23.770 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   23.770 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   23.770 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   23.770 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   23.770 MiB    0.000 MiB       import random
   256   23.770 MiB    0.000 MiB       old = 0
   257   23.770 MiB    0.000 MiB       getlist = []
   258                             
   259   31.352 MiB    7.582 MiB       for i in xrange(it):
   260                             
   261   31.352 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   31.352 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   31.352 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   31.352 MiB    0.000 MiB           if random.random()< getratio:
   267   31.352 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   31.352 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   31.352 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   31.352 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   31.164 MiB   -0.188 MiB               old = percent
   274   31.164 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |100000|1|300|10000000|100000|49|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.777 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.777 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.777 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.777 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.777 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.777 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.777 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.777 MiB    0.000 MiB           i=0
    25   13.777 MiB    0.000 MiB           ar = self.slabArray
    26   23.840 MiB   10.062 MiB           while i < self.slabNumber:
    27   23.840 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.840 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.840 MiB    0.000 MiB           self.taglru = 0
    33   23.840 MiB    0.000 MiB           self.tagunused = 1
    34   23.840 MiB    0.000 MiB           self.tagpartial = 2
    35   23.840 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.840 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.840 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.840 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.840 MiB    0.000 MiB           self.purged = 0
    43                             
    44   23.840 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   23.840 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   23.840 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   23.840 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   23.840 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   23.840 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   23.840 MiB    0.000 MiB       import random
   256   23.840 MiB    0.000 MiB       old = 0
   257   23.840 MiB    0.000 MiB       getlist = []
   258                             
   259   37.527 MiB   13.688 MiB       for i in xrange(it):
   260                             
   261   37.527 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   37.527 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   37.527 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   37.527 MiB    0.000 MiB           if random.random()< getratio:
   267   37.527 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   37.527 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   37.527 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   37.527 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   37.086 MiB   -0.441 MiB               old = percent
   274   37.086 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |500000|1|300|10000000|100000|520|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.656 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.656 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.656 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.656 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.656 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.656 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.656 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.656 MiB    0.000 MiB           i=0
    25   13.656 MiB    0.000 MiB           ar = self.slabArray
    26   23.656 MiB   10.000 MiB           while i < self.slabNumber:
    27   23.656 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28   23.656 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32   23.656 MiB    0.000 MiB           self.taglru = 0
    33   23.656 MiB    0.000 MiB           self.tagunused = 1
    34   23.656 MiB    0.000 MiB           self.tagpartial = 2
    35   23.656 MiB    0.000 MiB           self.tagcomplete = 3
    36   23.656 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37   23.656 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40   23.656 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42   23.656 MiB    0.000 MiB           self.purged = 0
    43                             
    44   23.656 MiB    0.000 MiB           for slabIndex in xrange(self.slabNumber):
    45   23.656 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47   23.656 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48   23.656 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50   23.656 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253   23.656 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255   23.656 MiB    0.000 MiB       import random
   256   23.656 MiB    0.000 MiB       old = 0
   257   23.656 MiB    0.000 MiB       getlist = []
   258                             
   259   65.637 MiB   41.980 MiB       for i in xrange(it):
   260                             
   261   65.637 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264   65.637 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265   65.637 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266   65.637 MiB    0.000 MiB           if random.random()< getratio:
   267   65.637 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269   65.637 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271   65.637 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272   65.637 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273   64.230 MiB   -1.406 MiB               old = percent
   274   64.230 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |10000|5|300|1000000000|1000000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.773 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.773 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.773 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.773 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.773 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.773 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.773 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.773 MiB    0.000 MiB           i=0
    25   13.773 MiB    0.000 MiB           ar = self.slabArray
    26  968.695 MiB  954.922 MiB           while i < self.slabNumber:
    27  968.695 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28  968.695 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32  968.695 MiB    0.000 MiB           self.taglru = 0
    33  968.695 MiB    0.000 MiB           self.tagunused = 1
    34  968.695 MiB    0.000 MiB           self.tagpartial = 2
    35  968.695 MiB    0.000 MiB           self.tagcomplete = 3
    36  968.695 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37  968.695 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40  968.695 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42  968.695 MiB    0.000 MiB           self.purged = 0
    43                             
    44  969.469 MiB    0.773 MiB           for slabIndex in xrange(self.slabNumber):
    45  969.469 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47  969.469 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48  969.469 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50  969.469 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253  969.469 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255  969.469 MiB    0.000 MiB       import random
   256  969.469 MiB    0.000 MiB       old = 0
   257  969.469 MiB    0.000 MiB       getlist = []
   258                             
   259  970.695 MiB    1.227 MiB       for i in xrange(it):
   260                             
   261  970.695 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264  970.695 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265  970.695 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266  970.695 MiB    0.000 MiB           if random.random()< getratio:
   267  970.695 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269  970.695 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271  970.695 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272  970.695 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273  970.695 MiB    0.000 MiB               old = percent
   274  970.695 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |50000|5|300|1000000000|1000000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.793 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.793 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.793 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.793 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.793 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.793 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.793 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.793 MiB    0.000 MiB           i=0
    25   13.793 MiB    0.000 MiB           ar = self.slabArray
    26  968.715 MiB  954.922 MiB           while i < self.slabNumber:
    27  968.715 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28  968.715 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32  968.715 MiB    0.000 MiB           self.taglru = 0
    33  968.715 MiB    0.000 MiB           self.tagunused = 1
    34  968.715 MiB    0.000 MiB           self.tagpartial = 2
    35  968.715 MiB    0.000 MiB           self.tagcomplete = 3
    36  968.715 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37  968.715 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40  968.715 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42  968.715 MiB    0.000 MiB           self.purged = 0
    43                             
    44  969.488 MiB    0.773 MiB           for slabIndex in xrange(self.slabNumber):
    45  969.488 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47  969.488 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48  969.488 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50  969.488 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253  969.488 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255  969.488 MiB    0.000 MiB       import random
   256  969.488 MiB    0.000 MiB       old = 0
   257  969.488 MiB    0.000 MiB       getlist = []
   258                             
   259  974.895 MiB    5.406 MiB       for i in xrange(it):
   260                             
   261  974.895 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264  974.895 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265  974.895 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266  974.895 MiB    0.000 MiB           if random.random()< getratio:
   267  974.895 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269  974.895 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271  974.895 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272  974.895 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273  974.895 MiB    0.000 MiB               old = percent
   274  974.895 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |100000|5|300|1000000000|1000000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.824 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.824 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.824 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.824 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.824 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.824 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.824 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.824 MiB    0.000 MiB           i=0
    25   13.824 MiB    0.000 MiB           ar = self.slabArray
    26  968.746 MiB  954.922 MiB           while i < self.slabNumber:
    27  968.746 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28  968.746 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32  968.746 MiB    0.000 MiB           self.taglru = 0
    33  968.746 MiB    0.000 MiB           self.tagunused = 1
    34  968.746 MiB    0.000 MiB           self.tagpartial = 2
    35  968.746 MiB    0.000 MiB           self.tagcomplete = 3
    36  968.746 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37  968.746 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40  968.746 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42  968.746 MiB    0.000 MiB           self.purged = 0
    43                             
    44  969.520 MiB    0.773 MiB           for slabIndex in xrange(self.slabNumber):
    45  969.520 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47  969.520 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48  969.520 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50  969.520 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253  969.520 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255  969.520 MiB    0.000 MiB       import random
   256  969.520 MiB    0.000 MiB       old = 0
   257  969.520 MiB    0.000 MiB       getlist = []
   258                             
   259  979.102 MiB    9.582 MiB       for i in xrange(it):
   260                             
   261  979.102 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264  979.102 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265  979.102 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266  979.102 MiB    0.000 MiB           if random.random()< getratio:
   267  979.102 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269  979.102 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271  979.102 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272  979.102 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273  978.816 MiB   -0.285 MiB               old = percent
   274  978.816 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 55% 60% 65% 70% 75% 80% 85% 90% 95% |500000|5|300|1000000000|1000000|0|
Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   13.707 MiB    0.000 MiB       @profile
     8                                 def __init__(self, totalSize, slabSize, logger):
     9                                     # to create slabArray:
    10                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
    11                                     #now self.slabArray.fromString('0'*slabSize)
    12                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    13                             
    14   13.707 MiB    0.000 MiB           self.logger = logger
    15                             
    16   13.707 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    17                             
    18   13.707 MiB    0.000 MiB           self.slabSize = slabSize
    19   13.707 MiB    0.000 MiB           self.totalSize = totalSize
    20                             
    21   13.707 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22                             
    23   13.707 MiB    0.000 MiB           self.slabArray = C_Array('c')
    24   13.707 MiB    0.000 MiB           i=0
    25   13.707 MiB    0.000 MiB           ar = self.slabArray
    26  968.625 MiB  954.918 MiB           while i < self.slabNumber:
    27  968.625 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    28  968.625 MiB    0.000 MiB               i += 1
    29                             
    30                                     #lru linked list
    31                             
    32  968.625 MiB    0.000 MiB           self.taglru = 0
    33  968.625 MiB    0.000 MiB           self.tagunused = 1
    34  968.625 MiB    0.000 MiB           self.tagpartial = 2
    35  968.625 MiB    0.000 MiB           self.tagcomplete = 3
    36  968.625 MiB    0.000 MiB           self.llheads  = [None, None, None, None]
    37  968.625 MiB    0.000 MiB           self.lltails = [None, None, None, None]
    38                             
    39                                     #
    40  968.625 MiB    0.000 MiB           self.cache = {}#collections.defaultdict() #dictionary of key-slab
    41                             
    42  968.625 MiB    0.000 MiB           self.purged = 0
    43                             
    44  969.398 MiB    0.773 MiB           for slabIndex in xrange(self.slabNumber):
    45  969.398 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    46                             
    47  969.398 MiB    0.000 MiB               LinkedList.push(self,self.taglru, slab)
    48  969.398 MiB    0.000 MiB               LinkedList.push(self, self.tagunused, slab)
    49                             
    50  969.398 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   253  969.398 MiB    0.000 MiB   @profile
   254                             def fun(cache, it, getsetratio, valuebytesize):
   255  969.398 MiB    0.000 MiB       import random
   256  969.398 MiB    0.000 MiB       old = 0
   257  969.398 MiB    0.000 MiB       getlist = []
   258                             
   259 1015.824 MiB   46.426 MiB       for i in xrange(it):
   260                             
   261 1015.824 MiB    0.000 MiB           setKey, setValue, getKey = trialPrepare(i ,it,cache, getlist, valuebytesize)
   262                             
   263                             
   264 1015.824 MiB    0.000 MiB           getratio = 1.0 * getsetratio/ (getsetratio +1)
   265 1015.824 MiB    0.000 MiB           setratio = 1.0/ (getsetratio +1)
   266 1015.824 MiB    0.000 MiB           if random.random()< getratio:
   267 1015.824 MiB    0.000 MiB               trialget(cache, setKey, setValue, getKey)
   268                                     else:
   269 1015.824 MiB    0.000 MiB               trialset(cache, setKey, setValue, getKey)
   270                             
   271 1015.824 MiB    0.000 MiB           percent = int(i*1.0/it *100)
   272 1015.824 MiB    0.000 MiB           if percent%5 == 0 and percent > old:
   273 1013.582 MiB   -2.242 MiB               old = percent
   274 1013.582 MiB    0.000 MiB               print "\b\b\b\b\b"+ str(percent)+"%",


