slabArray 10000000056
unused 87632
lru 87632
singleslab72


2 giga
Line #    Mem usage    Increment   Line Contents
================================================
     4   13.113 MiB    0.000 MiB       @profile
     5                                 def __init__(self, totalSize, slabSize):
     6
     7   13.113 MiB    0.000 MiB           self.slabSize = slabSize
     8   13.113 MiB    0.000 MiB           self.totalSize = totalSize
     9
    10
    11 1920.852 MiB 1907.738 MiB           self.slabArray = array.array('c','0'*self.totalSize) #empty char array
    12
    13 1920.852 MiB    0.000 MiB           self.unused = []
    14 1920.852 MiB    0.000 MiB           self.partial = []
    15 1920.852 MiB    0.000 MiB           self.complete = []
    16
    17 1920.852 MiB    0.000 MiB           self.lru = [] #list of slabs, ordered by last use
    18
    19 1920.852 MiB    0.000 MiB           self.cache = {} #dictionary of key-slab
    20
    21 1920.852 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22
    23 1922.207 MiB    1.355 MiB           for slabIndex in range(self.slabNumber):
    24 1922.207 MiB    0.000 MiB               slab = Slab(slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    25 1922.207 MiB    0.000 MiB               self.lru.append(slab)
    26 1922.207 MiB    0.000 MiB               self.unused.append(slab)


4 giga

Line #    Mem usage    Increment   Line Contents
================================================
     4   13.254 MiB    0.000 MiB       @profile
     5                                 def __init__(self, totalSize, slabSize):
     6
     7   13.254 MiB    0.000 MiB           self.slabSize = slabSize
     8   13.254 MiB    0.000 MiB           self.totalSize = totalSize
     9
    10
    11 3828.340 MiB 3815.086 MiB           self.slabArray = array.array('c','0'*self.totalSize) #empty char array
    12
    13 3828.340 MiB    0.000 MiB           self.unused = []
    14 3828.340 MiB    0.000 MiB           self.partial = []
    15 3828.340 MiB    0.000 MiB           self.complete = []
    16
    17 3828.340 MiB    0.000 MiB           self.lru = [] #list of slabs, ordered by last use
    18
    19 3828.340 MiB    0.000 MiB           self.cache = {} #dictionary of key-slab
    20
    21 3828.340 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22
    23 3831.223 MiB    2.883 MiB           for slabIndex in range(self.slabNumber):
    24 3831.223 MiB    0.000 MiB               slab = Slab(slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    25 3831.223 MiB    0.000 MiB               self.lru.append(slab)
    26 3831.223 MiB    0.000 MiB               self.unused.append(slab)
    27
    28 3831.223 MiB    0.000 MiB           print "done"

8 giga
Line #    Mem usage    Increment   Line Contents
================================================
     4   13.145 MiB    0.000 MiB       @profile
     5                                 def __init__(self, totalSize, slabSize):
     6
     7   13.145 MiB    0.000 MiB           self.slabSize = slabSize
     8   13.145 MiB    0.000 MiB           self.totalSize = totalSize
     9
    10
    11 7632.309 MiB 7619.164 MiB           self.slabArray = array.array('c','0'*self.totalSize) #empty char array
    12
    13 7632.559 MiB    0.250 MiB           self.unused = []
    14 7632.559 MiB    0.000 MiB           self.partial = []
    15 7632.559 MiB    0.000 MiB           self.complete = []
    16
    17 7632.559 MiB    0.000 MiB           self.lru = [] #list of slabs, ordered by last use
    18
    19 7632.559 MiB    0.000 MiB           self.cache = {} #dictionary of key-slab
    20
    21 7632.559 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22
    23 7638.938 MiB    6.379 MiB           for slabIndex in range(self.slabNumber):
    24 7638.938 MiB    0.000 MiB               slab = Slab(slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    25 7638.938 MiB    0.000 MiB               self.lru.append(slab)
    26 7638.938 MiB    0.000 MiB               self.unused.append(slab)
    27
    28 7639.184 MiB    0.246 MiB           print "done"

12 giga

Line #    Mem usage    Increment   Line Contents
================================================
     4   13.070 MiB    0.000 MiB       @profile
     5                                 def __init__(self, totalSize, slabSize):
     6
     7   13.070 MiB    0.000 MiB           self.slabSize = slabSize
     8   13.070 MiB    0.000 MiB           self.totalSize = totalSize
     9
    10
    11 11446.750 MiB 11433.680 MiB           self.slabArray = array.array('c','0'*self.totalSize) #empty char array
    12
    13 11447.008 MiB    0.258 MiB           self.unused = []
    14 11447.008 MiB    0.000 MiB           self.partial = []
    15 11447.008 MiB    0.000 MiB           self.complete = []
    16
    17 11447.008 MiB    0.000 MiB           self.lru = [] #list of slabs, ordered by last use
    18
    19 11447.008 MiB    0.000 MiB           self.cache = {} #dictionary of key-slab
    20
    21 11447.199 MiB    0.191 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    22
    23 11456.477 MiB    9.277 MiB           for slabIndex in range(self.slabNumber):
    24 11456.477 MiB    0.000 MiB               slab = Slab(slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    25 11456.477 MiB    0.000 MiB               self.lru.append(slab)
    26 11456.477 MiB    0.000 MiB               self.unused.append(slab)
    27
    28 11456.863 MiB    0.387 MiB           print "done"

se vado oltre, carica su swap. ho un portatile non una petroliera di ram



10 giga, 100 000 richieste, overhead di memoria:
andrea@andrebian:~/git/CellsCycle$ python -m memory_profiler CellCycle/MemoryThread/Cache.py
99.999%Filename: CellCycle/MemoryThread/Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
     5   13.414 MiB    0.000 MiB       @profile
     6                                 def __init__(self, totalSize, slabSize, logger):
     7                                     # to create slabArray:
     8                                     #before self.slabArray = C_Array('c', '0'*self.totalSize)
     9                                     #now self.slabArray.fromString('0'*slabSize)
    10                                     # to create '0'*totalSize string, system will use double of ram. with incremental appending, ram is not overloaded during initialization
    11                             
    12   13.414 MiB    0.000 MiB           self.logger = logger
    13                             
    14   13.414 MiB    0.000 MiB           self.logger.debug("Cache: Initializing cache with totalSize:" + str(totalSize/1000000.0) + "MB, slabSize:" + str(slabSize/1000000.0)+"MB")
    15                             
    16   13.414 MiB    0.000 MiB           self.slabSize = slabSize
    17   13.414 MiB    0.000 MiB           self.totalSize = totalSize
    18                             
    19   13.414 MiB    0.000 MiB           self.slabNumber = int(self.totalSize / self.slabSize)
    20                             
    21   13.414 MiB    0.000 MiB           self.slabArray = C_Array('c')
    22   13.414 MiB    0.000 MiB           i=0
    23   13.414 MiB    0.000 MiB           ar = self.slabArray
    24 9550.500 MiB 9537.086 MiB           while i < self.slabNumber:
    25 9550.500 MiB    0.000 MiB               ar.fromstring("0"*slabSize)
    26 9550.500 MiB    0.000 MiB               i += 1
    27                             
    28 9550.500 MiB    0.000 MiB           self.unused = []
    29 9550.500 MiB    0.000 MiB           self.partial = []
    30 9550.500 MiB    0.000 MiB           self.complete = []
    31                             
    32 9550.500 MiB    0.000 MiB           self.lru = [] #list of slabs, ordered by last use
    33                             
    34 9550.500 MiB    0.000 MiB           self.cache = {} #dictionary of key-slab
    35                             
    36                             
    37                             
    38 9550.500 MiB    0.000 MiB           for slabIndex in range(self.slabNumber):
    39 9550.500 MiB    0.000 MiB               slab = Slab(self, slabIndex,self.slabSize, self.slabNumber, self.totalSize)
    40 9550.500 MiB    0.000 MiB               self.lru.append(slab)
    41 9550.500 MiB    0.000 MiB               self.unused.append(slab)
    42                             
    43 9550.500 MiB    0.000 MiB           self.logger.debug("Cache: End of Initialization Cache, Success!")


Filename: CellCycle/MemoryThread/Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
    79 9581.672 MiB    0.000 MiB       @profile
    80                                 def set(self, key, value):
    81 9581.672 MiB    0.000 MiB           valueSize = len(value)
    82 9581.672 MiB    0.000 MiB           self.logger.debug("Cache: set of "+ str(key) + ", value:"+ str(value) + ",size:" + str(valueSize))
    83 9581.672 MiB    0.000 MiB           slab = self.cache.get(key)
    84                             
    85 9581.672 MiB    0.000 MiB           if slab== None:#insert new element
    86 9581.672 MiB    0.000 MiB               self.logger.debug("Cache: set of "+ str(key) + ", it is been added")
    87 9581.672 MiB    0.000 MiB               slab = self.getSlab(valueSize)
    88 9581.672 MiB    0.000 MiB               slab.setValue(key, value)
    89 9581.672 MiB    0.000 MiB               self.cache[key] = slab
    90 9581.672 MiB    0.000 MiB               self.updateLRU(slab)
    91                                     else:#update existent value
    92                                         self.logger.debug("Cache: set of "+ str(key) + ", it is been updated")
    93                                         if False: #change
    94                                             slab.setValue(key, value)
    95                                             self.updateLRU(slab)
    96                             
    97                                         else:
    98                                             self.cache[key] = None
    99                                             self.set(key,value)


Filename: CellCycle/MemoryThread/Cache.py

Line #    Mem usage    Increment   Line Contents
================================================
   184 9550.500 MiB    0.000 MiB   @profile
   185                             def fun(cache):
   186 9550.500 MiB    0.000 MiB       it = 100000
   187 9581.672 MiB   31.172 MiB       for i in range(it):
   188 9581.672 MiB    0.000 MiB           cache.set(str(i), "val"+str(i))
   189 9581.672 MiB    0.000 MiB           print "\b\b\b\b\b\b\b\b\b"+ str(i*1.0/it *100)+"%",